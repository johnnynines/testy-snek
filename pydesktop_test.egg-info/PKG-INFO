Metadata-Version: 2.4
Name: pydesktop-test
Version: 0.1.0
Summary: PyTest-based testing framework for Python desktop applications
Author-email: Developer <developer@example.com>
License: MIT
Project-URL: Homepage, https://github.com/example/pydesktop-test
Project-URL: Bug Tracker, https://github.com/example/pydesktop-test/issues
Keywords: testing,pytest,desktop,gui,ui
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Topic :: Software Development :: Testing
Classifier: Topic :: Software Development :: Testing :: Unit
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: flask>=3.0.3
Requires-Dist: openai>=1.75.0
Requires-Dist: pillow>=10.4.0
Requires-Dist: pytest>=6.0.0
Requires-Dist: pytest-cov>=2.12.0
Requires-Dist: pytest-html>=3.1.0
Requires-Dist: pyyaml>=6.0.2
Requires-Dist: rich>=10.0.0
Requires-Dist: typer>=0.15.2
Provides-Extra: dev
Requires-Dist: black; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pytest-xdist; extra == "dev"
Provides-Extra: cli
Requires-Dist: typer>=0.4.0; extra == "cli"
Provides-Extra: yaml
Requires-Dist: pyyaml>=6.0; extra == "yaml"

# Desktop Test

A standalone desktop testing suite for Python GUI applications based on PyTest. This tool runs locally on your computer to test desktop applications before deployment.

## Overview

Desktop Test provides a user-friendly way to run tests against desktop applications built with Python GUI frameworks (Tkinter, PyQt, etc.). No installation required - just download and run!

## Features

- **Desktop Testing**: Run tests directly on your local machine
- **Cross-Platform**: Works on Windows, macOS, and Linux
- **GUI Framework Support**: Test applications built with Tkinter, PyQt, wxPython, etc.
- **Screenshot Testing**: Capture screenshots for visual comparison
- **Custom Assertions**: Verify window states, control properties, and UI behaviors
- **HTML Reports**: Generate detailed test reports with screenshots
- **Code Coverage**: Track which parts of your application are covered by tests

## Requirements

- Python 3.6 or higher
- PyTest (will be checked and a warning displayed if not installed)
- GUI library corresponding to your application (e.g., Tkinter, PyQt)

## Getting Started

1. Download this repository to your computer
2. Navigate to the repository directory in your terminal
3. Run the executable script:

```bash
# On Linux/macOS
./desktop-test run

# On Windows
python desktop-test run
```

## Writing Tests

Create a `tests` directory in your project and add test files. Here's a simple example for a Tkinter application:

```python
# tests/test_my_app.py
import pytest
from myapp import MyApplication  # Your application

def test_app_window_title(app_instance, main_window):
    # Test that the application window has the correct title
    assert main_window.title() == "My Application"

def test_button_click(app_instance):
    # Test that clicking a button updates the counter
    # Get the button and counter label
    button = app_instance.button
    counter_label = app_instance.counter_label
    
    # Get initial counter value
    initial_value = int(counter_label["text"])
    
    # Click the button
    button.invoke()
    
    # Check that the counter was incremented
    assert int(counter_label["text"]) == initial_value + 1
```

## Command-Line Options

```bash
# Run all tests
./desktop-test run

# Run specific test files or directories
./desktop-test run tests/test_login.py

# Generate HTML report
./desktop-test run --html

# Run tests in parallel for faster results
./desktop-test run --parallel

# List all available tests without running them
./desktop-test list
```

## Configuration

Create a `desktop_test.json` file in your project root for custom settings:

```json
{
    "test_dir": "tests",
    "report_dir": "test_reports",
    "screenshot_dir": "screenshots",
    "screenshot_on_failure": true,
    "parallel": true,
    "max_workers": 4
}
```

## Example Projects

See the `examples` directory for sample desktop applications with test suites:

- `examples/tkinter_app`: A simple Tkinter note-taking application
- `examples/pyqt_app`: A PyQt calculator application (requires PyQt installation)

## Custom Assertions for UI Testing

Desktop Test provides special assertion functions for UI testing:

```python
from desktop_test.assertions import (
    assert_window_exists,
    assert_control_exists,
    assert_control_value,
    assert_control_enabled,
    assert_dialog_shown
)

def test_dialog_shown(app_instance):
    # Click a button that shows a dialog
    app_instance.show_dialog_button.invoke()
    
    # Assert that a dialog with the given title is shown
    dialog = assert_dialog_shown(app_instance, "Confirmation Dialog")
    
    # Check dialog content
    ok_button = assert_control_exists(dialog, "ok_button")
    assert_control_enabled(ok_button)
```
